AWSTemplateFormatVersion: '2010-09-09'
Description: An AWS Serverless Specification template describing your API.
Parameters:
  RSDatabaseName:
    Type: String
    Default: 'dev'
    Description: 'Enter your redshift database name'
  RSClusterID:
    Type: String
    Default: 'redshift-cluster-2'
    Description: 'Enter your redshift cluster ID'
  RSSecret:
    Type: String
    Default: 'arn:aws:secretsmanager:us-east-2:493089398351:secret:rsdataapi-crtRBc'
    Description: 'Enter your redshift secret manager arn where you have stored db credentials. Key names should be username, password, engine, host, port, dbClusterIdentifier'
  RSUser:
    Type: String
    Default: 'admin'
    Description: 'userid that has access to redshift cluster'
  RSDataFileS3BucketName:
    Type: String
    Default: 'rsuploadbucket03'
    Description: 'Provide a new bucketname'
  RSDataFetchQ:
    Type: String
    Default: 'select * from rsdataapi.product_detail where sku='
    Description: 'Enter the SQL query that needs to be mapped to API'
  RSS3CopyRoleArn:
    Type: String
    Default: 'arn:aws:iam::<youraccount>:role/<RoleName>'
    Description: 'Enter the redshift role arn that is associated with cluster and has permission to write to s3 bucket'
  RsFileArchiveBucket:
    Type: String
    Default: 'rsfiledownload01'
    Description: 'Enter the s3 bucket name from where you will download the file'
  RsSourceEmailAddress:
    Type: String
    Default: 'xyz@abc.com'
    Description: 'Enter a valid email address which would be displayed as source of email'
  RsTargetEmailAddress:
    Type: String
    Default: 'xyz@abc.com'
    Description: 'Enter a valid email address where you would get the status of the request'
  RsStatusTableName:
    Type: String
    Default: 'rsdata_status_check'
    Description: 'Enter the name you want for your status table in Dynamodb'
  RsSingedURLExpTime:
    Type: Number
    Default: 3600
    Description: 'Enter the expiry time of S3 pre-signed URL'
  RsS3CodeRepo:
    Type: String
    Default: rsdatacode
    Description: 'Enter s3 bucket name for the build files'
Resources:
  RSDataRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 90
      QueueName: 'RSDataRequest'
      RedrivePolicy:
        deadLetterTargetArn: !Sub ${RSDataDeadLetterQueue.Arn}
        maxReceiveCount: 10
  RSDataDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'RSDataRequestDLQ'
      MessageRetentionPeriod: 864000
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 500
  RSDataRequestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: RSDataCWLogsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: RSDataSQSPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - sqs:ChangeMessageVisibility
            - sqs:SendMessage
            Resource: 
              - !Sub ${RSDataRequestQueue.Arn}
              - !Sub ${RSDataDeadLetterQueue.Arn}
      - PolicyName: RSDataDynamodbPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource: !Sub ${RSDataRequestStatusTable.Arn}
  rsRequestHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: rsRequestHandler
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket: !Ref RsS3CodeRepo
        S3Key: 'rsRequestHandler.zip'
      Description: ''
      MemorySize: 1536
      Timeout: 300
      Role: !Sub ${RSDataRequestLambdaRole.Arn}
      Environment:
        Variables: 
          QUEUE_URL: !Ref RSDataRequestQueue
  RSDataRequestApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: RSDataAPIRequestLambdaAccess
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Action: 
                - lambda:*
                Resource: !Sub ${rsRequestHandler.Arn}
  RSDataRequestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Name: RSDataRequestAPI
      EndpointConfiguration:
        Types:
          - REGIONAL
  RSDataRequestAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RSDataRequestAPI
      ParentId:
        Fn::GetAtt:
        - RSDataRequestAPI
        - RootResourceId
      PathPart: 'product'
  RSDataRequestAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: 'true'
      AuthorizationType: NONE
      HttpMethod: POST
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "application/json": "Empty" }
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rsRequestHandler.Arn}/invocations
        PassthroughBehavior: WHEN_NO_TEMPLATES
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates: {"application/json": "{'RequestId' : $input.json('$')}"}
      ResourceId: !Ref RSDataRequestAPIResource
      RestApiId: !Ref RSDataRequestAPI
  RSDataAPIGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref RSDataRequestAPI
      Schema: {}
  RSDataAPIGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref RSDataRequestAPIStageTest
      Description: API Stage v0
      RestApiId: !Ref RSDataRequestAPI
      StageName: 'v0'
  RSDataRequestAPIStageTest:
    Type: AWS::ApiGateway::Deployment
    DependsOn: RSDataRequestAPIMethod
    Properties:
      RestApiId: !Ref RSDataRequestAPI
      Description: RSDataRequestAPI deployment
  RSDataAPIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties: 
      ApiStages:
        - ApiId: !Ref RSDataRequestAPI
          Stage: !Ref RSDataAPIGatewayStage
      Description: For the redshift data api request
      Quota: 
        Limit: 100000
        Period: MONTH
      Throttle: 
        BurstLimit: 1000
        RateLimit: 1000
      UsagePlanName: RSDataAPIUsagePlan
  RSDataApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - RSDataRequestAPI
      - RSDataAPIUsagePlan
    Properties:
      Name: RSDataAPIKey
      Description: API Key for RSDataApi
      Enabled: 'true'
  RSDataUsagePlanKey: 
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref RSDataApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref RSDataAPIUsagePlan
  RSDataRequestLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt rsRequestHandler.Arn
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RSDataRequestAPI}/*/POST/product
  RSDataRequestLambdaDestination:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref rsRequestHandler
      Qualifier: '$LATEST'
      DestinationConfig:
        OnFailure:
          Destination: !Sub ${RSDataDeadLetterQueue.Arn}
        OnSuccess: 
          Destination: !Sub ${RSDataRequestQueue.Arn}
  RSDataRequestStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - 
          AttributeName: "requestid"
          AttributeType: "S"
        - 
          AttributeName: "stepname"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "requestid"
          KeyType: "HASH"
        - 
          AttributeName: "stepname"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Ref RsStatusTableName
  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
  rsDataProcessHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: rsDataProcessHandler
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Code:
        S3Bucket: !Ref RsS3CodeRepo
        S3Key: 'rsDataProcessHandler.zip'
      Description: ''
      MemorySize: 1536
      Timeout: 90
      Role: !Sub ${ RSDataProcessorLambdaRole.Arn}
      Environment:
        Variables: 
          QUEUE_URL: !Ref RSDataRequestQueue
          database_name: !Ref RSDatabaseName
          progress_status: 'in-progress'
          rs_cluster_id: !Ref RSClusterID
          secret_arn: !Ref RSSecret
          status_table_name: !Ref RSDataRequestStatusTable
          rs_sql: !Ref RSDataFetchQ
          rs_iam_role_arn: !Ref RSS3CopyRoleArn
          rs_result_bucket: !Ref RSDataFileS3BucketName
  RSDataProcessLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt rsDataProcessHandler.Arn
      Action: lambda:InvokeFunction
      Principal: 'sqs.amazonaws.com'
      SourceArn: !Sub ${RSDataRequestQueue.Arn}
  RSDataProcessLambdaSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref rsDataProcessHandler
      EventSourceArn: !Sub ${RSDataRequestQueue.Arn}
  RSDataProcessorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: RSDataProcessCWLogsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: RSDataProcessSQSPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - sqs:ChangeMessageVisibility
            - sqs:SendMessage
            Resource: 
              - !Sub ${RSDataRequestQueue.Arn}
              - !Sub ${RSDataDeadLetterQueue.Arn}
      - PolicyName: RSDataProcessDynamodbPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource: !Sub ${RSDataRequestStatusTable.Arn}
      - PolicyName: RSDataProcessSecretManagerPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:*
            Resource: !Ref RSSecret
      - PolicyName: RSDataProcessRedshiftPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - redshift-data:*
            - redshift:GetClusterCredentials
            Resource: 
              - !Sub arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${RSClusterID}/${RSUser}
              - !Sub arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${RSDatabaseName}/*
              - !Sub arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${RSClusterID}
      - PolicyName: RSDataProcessS3Policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: 
              - !Join [":", ['arn:aws:s3::',!Ref RSDataFileS3BucketName]] 
              - !Join ["/", [!Join [":", ['arn:aws:s3::',!Ref RSDataFileS3BucketName]],'*']]
  RSS3DownloadBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Ref RSDataFileS3BucketName
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      NotificationConfiguration:
        LambdaConfigurations:
            - Event: 's3:ObjectCreated:*'
              Filter:
                S3Key:
                  Rules:
                    - Name: 'suffix'
                      Value: 'manifest'
              Function: !GetAtt rsFileArchive.Arn
  rsFileArchive:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: rsFileArchive
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket: !Ref RsS3CodeRepo
        S3Key: 'rsFileArchive.zip'
      Description: ''
      MemorySize: 1536
      Timeout: 300
      Role: !Sub ${RSFileArchiveLambdaRole.Arn}
      Environment:
        Variables: 
          FILE_EXTN: '.zip'
          TARGET_BUCKET_NAME: !Ref RsFileArchiveBucket
  RSDataFileArchiveambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt rsFileArchive.Arn
      Action: lambda:InvokeFunction
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Join [":", ['arn:aws:s3::',!Ref RSDataFileS3BucketName]] 
  RSFileArchiveLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: RSDataProcessCWLogsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: RSDataProcessDynamodbPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource: !Sub ${RSDataRequestStatusTable.Arn}
      - PolicyName: RSDataProcessS3Policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: 
              - !Join [":", ['arn:aws:s3::',!Ref RSDataFileS3BucketName]] 
              - !Join ["/", [!Join [":", ['arn:aws:s3::',!Ref RSDataFileS3BucketName]],'*']]
              - !Join [":", ['arn:aws:s3::',!Ref RsFileArchiveBucket]] 
              - !Join ["/", [!Join [":", ['arn:aws:s3::',!Ref RsFileArchiveBucket]],'*']]
  rsDataFileArchiveStatus:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: rsDataFileArchiveStatus
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket: !Ref RsS3CodeRepo
        S3Key: 'rsDataFileArchiveStatus.zip'
      Description: ''
      MemorySize: 1536
      Timeout: 300
      Role: !Sub ${rsDataFileArchiveStatusRole.Arn}
      Environment:
        Variables: 
          FILE_EXTN: '.zip'
          BUCKET_NAME: !Ref RsFileArchiveBucket
          SOURCE_EMAIL: !Ref RsSourceEmailAddress
          TARGET_EMAIL: !Ref RsTargetEmailAddress
          EXPIRY_TIME:  !Ref RsSingedURLExpTime
          STATUS_TABLE_NM: !Ref RsStatusTableName
  rsDataFileArchiveStatusLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt rsDataFileArchiveStatus.Arn
      Action: lambda:InvokeFunction
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Join [":", ['arn:aws:s3::',!Ref RsFileArchiveBucket]] 
  rsDataFileArchiveStatusRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: RSDataProcessCWLogsPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: RSDataProcessDynamodbPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource: !Sub ${RSDataRequestStatusTable.Arn}
      - PolicyName: RSDataProcessS3Policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource: 
              - !Join [":", ['arn:aws:s3::',!Ref RsFileArchiveBucket]] 
              - !Join ["/", [!Join [":", ['arn:aws:s3::',!Ref RsFileArchiveBucket]],'*']]
      - PolicyName: RSSESPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ses:*
            Resource: '*'
  RSS3ArchiveBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Ref RsFileArchiveBucket
      PublicAccessBlockConfiguration: 
          BlockPublicAcls: 'true'
          BlockPublicPolicy: 'true'
          IgnorePublicAcls: 'true'
          RestrictPublicBuckets: 'true'
      NotificationConfiguration:
        LambdaConfigurations:
            - Event: 's3:ObjectCreated:*'
              Filter:
                S3Key:
                  Rules:
                    - Name: 'suffix'
                      Value: 'zip'
              Function: !GetAtt rsDataFileArchiveStatus.Arn
Outputs:
  RSDataAPIKeyID:
    Value: !Ref RSDataApiKey
  RSDataAPIURL:
    Value: !Sub https://${RSDataRequestAPI}.execute-api.${AWS::Region}.amazonaws.com/${RSDataAPIGatewayStage}/product